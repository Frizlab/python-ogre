Index: OgreMain/include/OgreMovableObject.h
===================================================================
--- OgreMain/include/OgreMovableObject.h	(revision 7873)
+++ OgreMain/include/OgreMovableObject.h	(working copy)
@@ -482,7 +482,7 @@
 			included too.
 		*/
 		virtual void visitRenderables(Renderable::Visitor* visitor, 
-			bool debugRenderables = false) = 0;
+			bool debugRenderables = false) { throw std::runtime_error ( std::string ("Virtual function MovableObject::visitRenderables called!") ); }
 
 		/** Sets whether or not the debug display of this object is enabled.
 		@remarks
Index: OgreMain/include/OgreRenderQueueListener.h
===================================================================
--- OgreMain/include/OgreRenderQueueListener.h	(revision 7873)
+++ OgreMain/include/OgreRenderQueueListener.h	(working copy)
@@ -31,7 +31,9 @@
 
 #include "OgrePrerequisites.h"
 #include "OgreRenderQueue.h"
+#include <stdexcept>
 
+
 namespace Ogre {
 
     /** Abstract interface which classes must implement if they wish to receive
@@ -64,8 +66,8 @@
 			rendered. Note that in this case the renderQueueEnded event will not be raised
 			for this queue group.
         */
-        virtual void renderQueueStarted(uint8 queueGroupId, const String& invocation, 
-			bool& skipThisInvocation) = 0;
+        virtual bool renderQueueStarted(uint8 queueGroupId, const String& invocation, 
+			bool skipThisInvocation) { throw std::runtime_error ( std::string ("Virtual function RenderQueueListener::renderQueueStarted called!") ); }
 
         /** Event raised after a queue group is rendered. 
         @remarks
@@ -79,8 +81,8 @@
 			rendered will be repeated, and the renderQueueStarted and renderQueueEnded
 			events will also be fired for it again.
         */
-        virtual void renderQueueEnded(uint8 queueGroupId, const String& invocation, 
-			bool& repeatThisInvocation) = 0;
+        virtual bool renderQueueEnded(uint8 queueGroupId, const String& invocation, 
+			bool repeatThisInvocation) { throw std::runtime_error ( std::string ("Virtual function RenderQueueListener::renderQueueEnded called!") ); }
     };
 
 }
Index: OgreMain/include/OgreResourceGroupManager.h
===================================================================
--- OgreMain/include/OgreResourceGroupManager.h	(revision 7873)
+++ OgreMain/include/OgreResourceGroupManager.h	(working copy)
@@ -37,6 +37,7 @@
 #include "OgreArchive.h"
 #include "OgreIteratorWrappers.h"
 #include <ctime>
+#include <stdexcept>
 
 namespace Ogre {
 
@@ -92,7 +93,7 @@
 			parsed. Note that in this case the scriptParseEnded event will not be raised
 			for this script.
 		*/
-		virtual void scriptParseStarted(const String& scriptName, bool& skipThisScript) = 0;
+		virtual bool scriptParseStarted(const String& scriptName, bool skipThisScript)  { throw std::runtime_error ( std::string ("Virtual function ResourceGroupListener::scriptParseStarted called!") ); }
 
 		/** This event is fired when the script has been fully parsed.
 		*/
@@ -350,7 +351,7 @@
 		/// Internal event firing method
 		void fireResourceGroupScriptingStarted(const String& groupName, size_t scriptCount);
 		/// Internal event firing method
-		void fireScriptStarted(const String& scriptName, bool &skipScript);
+		bool fireScriptStarted(const String& scriptName, bool skipScript);
         /// Internal event firing method
         void fireScriptEnded(const String& scriptName, bool skipped);
 		/// Internal event firing method
Index: OgreMain/include/OgreDataStream.h
===================================================================
--- OgreMain/include/OgreDataStream.h	(revision 7873)
+++ OgreMain/include/OgreDataStream.h	(working copy)
@@ -33,6 +33,7 @@
 #include "OgreString.h"
 #include "OgreSharedPtr.h"
 #include <istream>
+#include <stdexcept>
 
 namespace Ogre {
 
@@ -79,7 +80,7 @@
 		@param count Number of bytes to read
 		@returns The number of bytes read
 		*/
-		virtual size_t read(void* buf, size_t count) = 0;
+		virtual size_t read(void* buf, size_t count) { throw std::runtime_error ( std::string ("Virtual function DataStream::read called!") ); }
 		/** Get a single line from the stream.
 		@remarks
 			The delimiter character is not included in the data
Index: OgreMain/include/OgreHardwareBuffer.h
===================================================================
--- OgreMain/include/OgreHardwareBuffer.h	(revision 7873)
+++ OgreMain/include/OgreHardwareBuffer.h	(working copy)
@@ -31,7 +31,9 @@
 
 // Precompiler options
 #include "OgrePrerequisites.h"
+#include <stdexcept>
 
+
 namespace Ogre {
 
     /** Abstract class defining common features of hardware buffers.
@@ -244,7 +246,7 @@
             @param pDest The area of memory in which to place the data, must be large enough to 
                 accommodate the data!
             */
-            virtual void readData(size_t offset, size_t length, void* pDest) = 0;
+            virtual void readData(size_t offset, size_t length, void* pDest) { throw std::runtime_error ( std::string ("Virtual function HardwareBuffer::readData called!") ); }
             /** Writes data to the buffer from an area of system memory; note that you must
                 ensure that your buffer is big enough.
 		    @param offset The byte offset from the start of the buffer to start writing
@@ -254,7 +256,7 @@
 				such that DMA stalls can be avoided; use if you can.
             */
             virtual void writeData(size_t offset, size_t length, const void* pSource,
-					bool discardWholeBuffer = false) = 0;
+					bool discardWholeBuffer = false) { throw std::runtime_error ( std::string ("Virtual function HardwareBuffer::writeData called!") ); }
 
 			/** Copy data from another buffer into this one.
 			@remarks
Index: OgreMain/include/OgreCompositorChain.h
===================================================================
--- OgreMain/include/OgreCompositorChain.h	(revision 7873)
+++ OgreMain/include/OgreCompositorChain.h	(working copy)
@@ -174,10 +174,10 @@
 		public:
 			/** @copydoc RenderQueueListener::renderQueueStarted
 			*/
-			virtual void renderQueueStarted(uint8 id, const String& invocation, bool& skipThisQueue);
+			virtual bool renderQueueStarted(uint8 id, const String& invocation, bool skipThisQueue);
 			/** @copydoc RenderQueueListener::renderQueueEnded
 			*/
-			virtual void renderQueueEnded(uint8 id, const String& invocation, bool& repeatThisQueue);
+			virtual bool renderQueueEnded(uint8 id, const String& invocation, bool repeatThisQueue);
 
 			/** Set current operation and target */
 			void setOperation(CompositorInstance::TargetOperation *op,SceneManager *sm,RenderSystem *rs);
Index: OgreMain/src/OgreResourceGroupManager.cpp
===================================================================
--- OgreMain/src/OgreResourceGroupManager.cpp	(revision 7873)
+++ OgreMain/src/OgreResourceGroupManager.cpp	(working copy)
@@ -929,7 +929,7 @@
 			    for (FileInfoList::iterator fii = (*flli)->begin(); fii != (*flli)->end(); ++fii)
 			    {
 					bool skipScript = false;
-                    fireScriptStarted(fii->filename, skipScript);
+                    skipScript = fireScriptStarted(fii->filename, skipScript);
 					if(skipScript)
 					{
 						LogManager::getSingleton().logMessage(
@@ -1218,17 +1218,18 @@
 		}
 	}
 	//-----------------------------------------------------------------------
-	void ResourceGroupManager::fireScriptStarted(const String& scriptName, bool &skipScript)
+	bool ResourceGroupManager::fireScriptStarted(const String& scriptName, bool skipScript)
 	{
 		OGRE_LOCK_AUTO_MUTEX
 		for (ResourceGroupListenerList::iterator l = mResourceGroupListenerList.begin();
 			l != mResourceGroupListenerList.end(); ++l)
 		{
 			bool temp = false;
-			(*l)->scriptParseStarted(scriptName, temp);
+			temp = (*l)->scriptParseStarted(scriptName, temp);
 			if(temp)
 				skipScript = true;
 		}
+		return skipScript;
 	}
     //-----------------------------------------------------------------------
     void ResourceGroupManager::fireScriptEnded(const String& scriptName, bool skipped)
Index: OgreMain/src/OgreCompositorChain.cpp
===================================================================
--- OgreMain/src/OgreCompositorChain.cpp	(revision 7873)
+++ OgreMain/src/OgreCompositorChain.cpp	(working copy)
@@ -377,8 +377,8 @@
 	mViewport = vp;
 }
 //-----------------------------------------------------------------------
-void CompositorChain::RQListener::renderQueueStarted(uint8 id, 
-	const String& invocation, bool& skipThisQueue)
+bool CompositorChain::RQListener::renderQueueStarted(uint8 id, 
+	const String& invocation, bool skipThisQueue)
 {
 	// Skip when not matching viewport
 	// shadows update is nested within main viewport update
@@ -392,11 +392,13 @@
 	{
 		skipThisQueue = true;
 	}
+	return skipThisQueue;
 }
 //-----------------------------------------------------------------------
-void CompositorChain::RQListener::renderQueueEnded(uint8 id, 
-	const String& invocation, bool& repeatThisQueue)
+bool CompositorChain::RQListener::renderQueueEnded(uint8 id, 
+	const String& invocation, bool repeatThisQueue)
 {
+    return repeatThisQueue;
 }
 //-----------------------------------------------------------------------
 void CompositorChain::RQListener::setOperation(CompositorInstance::TargetOperation *op,SceneManager *sm,RenderSystem *rs)
Index: OgreMain/src/OgreSceneManager.cpp
===================================================================
--- OgreMain/src/OgreSceneManager.cpp	(revision 7873)
+++ OgreMain/src/OgreSceneManager.cpp	(working copy)
@@ -3651,7 +3651,7 @@
     iend = mRenderQueueListeners.end();
     for (i = mRenderQueueListeners.begin(); i != iend; ++i)
     {
-        (*i)->renderQueueStarted(id, invocation, skip);
+        skip = (*i)->renderQueueStarted(id, invocation, skip);
     }
     return skip;
 }
@@ -3664,7 +3664,7 @@
     iend = mRenderQueueListeners.end();
     for (i = mRenderQueueListeners.begin(); i != iend; ++i)
     {
-        (*i)->renderQueueEnded(id, invocation, repeat);
+        repeat = (*i)->renderQueueEnded(id, invocation, repeat);
     }
     return repeat;
 }
