--- c:\temp\ogre\/OgreMain/include/OgreCompositorChain.h	2008-06-12 22:10:57.000000000 +0800
+++ ogre/OgreMain/include/OgreCompositorChain.h	2008-08-29 21:13:40.000000000 +0800
@@ -174,10 +174,10 @@
 		public:
 			/** @copydoc RenderQueueListener::renderQueueStarted
 			*/
-			virtual void renderQueueStarted(uint8 id, const String& invocation, bool& skipThisQueue);
+			virtual bool renderQueueStarted(uint8 id, const String& invocation, bool skipThisQueue);
 			/** @copydoc RenderQueueListener::renderQueueEnded
 			*/
-			virtual void renderQueueEnded(uint8 id, const String& invocation, bool& repeatThisQueue);
+			virtual bool renderQueueEnded(uint8 id, const String& invocation, bool repeatThisQueue);
 
 			/** Set current operation and target */
 			void setOperation(CompositorInstance::TargetOperation *op,SceneManager *sm,RenderSystem *rs);
--- c:\temp\ogre\/OgreMain/include/OgreDataStream.h	2008-06-26 06:40:09.000000000 +0800
+++ ogre/OgreMain/include/OgreDataStream.h	2008-08-29 21:13:39.984375000 +0800
@@ -33,6 +33,7 @@
 #include "OgreString.h"
 #include "OgreSharedPtr.h"
 #include <istream>
+#include <stdexcept>
 
 namespace Ogre {
 
@@ -79,7 +80,7 @@
 		@param count Number of bytes to read
 		@returns The number of bytes read
 		*/
-		virtual size_t read(void* buf, size_t count) = 0;
+		virtual size_t read(void* buf, size_t count) { throw std::runtime_error ( std::string ("Virtual function DataStream::read called!") ); }
 		/** Get a single line from the stream.
 		@remarks
 			The delimiter character is not included in the data
--- c:\temp\ogre\/OgreMain/include/OgreHardwareBuffer.h	2008-06-12 22:10:57.000000000 +0800
+++ ogre/OgreMain/include/OgreHardwareBuffer.h	2008-08-29 21:13:40.000000000 +0800
@@ -31,6 +31,8 @@
 
 // Precompiler options
 #include "OgrePrerequisites.h"
+#include <stdexcept>
+
 
 namespace Ogre {
 
@@ -244,7 +246,7 @@
             @param pDest The area of memory in which to place the data, must be large enough to 
                 accommodate the data!
             */
-            virtual void readData(size_t offset, size_t length, void* pDest) = 0;
+            virtual void readData(size_t offset, size_t length, void* pDest) { throw std::runtime_error ( std::string ("Virtual function HardwareBuffer::readData called!") ); }
             /** Writes data to the buffer from an area of system memory; note that you must
                 ensure that your buffer is big enough.
 		    @param offset The byte offset from the start of the buffer to start writing
@@ -254,7 +256,7 @@
 				such that DMA stalls can be avoided; use if you can.
             */
             virtual void writeData(size_t offset, size_t length, const void* pSource,
-					bool discardWholeBuffer = false) = 0;
+					bool discardWholeBuffer = false) { throw std::runtime_error ( std::string ("Virtual function HardwareBuffer::writeData called!") ); }
 
 			/** Copy data from another buffer into this one.
 			@remarks
--- c:\temp\ogre\/OgreMain/include/OgreMovableObject.h	2008-06-24 20:05:44.000000000 +0800
+++ ogre/OgreMain/include/OgreMovableObject.h	2008-08-29 21:13:39.968750000 +0800
@@ -482,7 +482,7 @@
 			included too.
 		*/
 		virtual void visitRenderables(Renderable::Visitor* visitor, 
-			bool debugRenderables = false) = 0;
+			bool debugRenderables = false) { throw std::runtime_error ( std::string ("Virtual function MovableObject::visitRenderables called!") ); }
 
 		/** Sets whether or not the debug display of this object is enabled.
 		@remarks
--- c:\temp\ogre\/OgreMain/include/OgreRenderQueueListener.h	2008-06-12 22:10:57.000000000 +0800
+++ ogre/OgreMain/include/OgreRenderQueueListener.h	2008-08-29 21:13:39.984375000 +0800
@@ -31,6 +31,8 @@
 
 #include "OgrePrerequisites.h"
 #include "OgreRenderQueue.h"
+#include <stdexcept>
+
 
 namespace Ogre {
 
@@ -64,8 +66,8 @@
 			rendered. Note that in this case the renderQueueEnded event will not be raised
 			for this queue group.
         */
-        virtual void renderQueueStarted(uint8 queueGroupId, const String& invocation, 
-			bool& skipThisInvocation) = 0;
+        virtual bool renderQueueStarted(uint8 queueGroupId, const String& invocation, 
+			bool skipThisInvocation) { throw std::runtime_error ( std::string ("Virtual function RenderQueueListener::renderQueueStarted called!") ); }
 
         /** Event raised after a queue group is rendered. 
         @remarks
@@ -79,8 +81,8 @@
 			rendered will be repeated, and the renderQueueStarted and renderQueueEnded
 			events will also be fired for it again.
         */
-        virtual void renderQueueEnded(uint8 queueGroupId, const String& invocation, 
-			bool& repeatThisInvocation) = 0;
+        virtual bool renderQueueEnded(uint8 queueGroupId, const String& invocation, 
+			bool repeatThisInvocation) { throw std::runtime_error ( std::string ("Virtual function RenderQueueListener::renderQueueEnded called!") ); }
     };
 
 }
--- c:\temp\ogre\/OgreMain/include/OgreResourceGroupManager.h	2008-07-05 06:10:45.000000000 +0800
+++ ogre/OgreMain/include/OgreResourceGroupManager.h	2008-08-29 21:13:39.984375000 +0800
@@ -37,6 +37,7 @@
 #include "OgreArchive.h"
 #include "OgreIteratorWrappers.h"
 #include <ctime>
+#include <stdexcept>
 
 namespace Ogre {
 
@@ -92,7 +93,7 @@
 			parsed. Note that in this case the scriptParseEnded event will not be raised
 			for this script.
 		*/
-		virtual void scriptParseStarted(const String& scriptName, bool& skipThisScript) = 0;
+		virtual bool scriptParseStarted(const String& scriptName, bool skipThisScript)  { throw std::runtime_error ( std::string ("Virtual function ResourceGroupListener::scriptParseStarted called!") ); }
 
 		/** This event is fired when the script has been fully parsed.
 		*/
@@ -350,7 +351,7 @@
 		/// Internal event firing method
 		void fireResourceGroupScriptingStarted(const String& groupName, size_t scriptCount);
 		/// Internal event firing method
-		void fireScriptStarted(const String& scriptName, bool &skipScript);
+		bool fireScriptStarted(const String& scriptName, bool skipScript);
         /// Internal event firing method
         void fireScriptEnded(const String& scriptName, bool skipped);
 		/// Internal event firing method
--- c:\temp\ogre\/OgreMain/src/OgreCompositorChain.cpp	2008-07-24 07:14:09.000000000 +0800
+++ ogre/OgreMain/src/OgreCompositorChain.cpp	2008-08-30 18:17:17.046875000 +0800
@@ -377,13 +377,13 @@
 	mViewport = vp;
 }
 //-----------------------------------------------------------------------
-void CompositorChain::RQListener::renderQueueStarted(uint8 id, 
-	const String& invocation, bool& skipThisQueue)
+bool CompositorChain::RQListener::renderQueueStarted(uint8 id, 
+	const String& invocation, bool skipThisQueue)
 {
 	// Skip when not matching viewport
 	// shadows update is nested within main viewport update
 	if (mSceneManager->getCurrentViewport() != mViewport)
-		return;
+		return skipThisQueue;
 
 	flushUpTo(id);
 	/// If noone wants to render this queue, skip it
@@ -392,11 +392,13 @@
 	{
 		skipThisQueue = true;
 	}
+	return skipThisQueue;
 }
 //-----------------------------------------------------------------------
-void CompositorChain::RQListener::renderQueueEnded(uint8 id, 
-	const String& invocation, bool& repeatThisQueue)
+bool CompositorChain::RQListener::renderQueueEnded(uint8 id, 
+	const String& invocation, bool repeatThisQueue)
 {
+    return repeatThisQueue;
 }
 //-----------------------------------------------------------------------
 void CompositorChain::RQListener::setOperation(CompositorInstance::TargetOperation *op,SceneManager *sm,RenderSystem *rs)
--- c:\temp\ogre\/OgreMain/src/OgreResourceGroupManager.cpp	2008-07-05 06:10:45.000000000 +0800
+++ ogre/OgreMain/src/OgreResourceGroupManager.cpp	2008-08-29 21:13:40.015625000 +0800
@@ -929,7 +929,7 @@
 			    for (FileInfoList::iterator fii = (*flli)->begin(); fii != (*flli)->end(); ++fii)
 			    {
 					bool skipScript = false;
-                    fireScriptStarted(fii->filename, skipScript);
+                    skipScript = fireScriptStarted(fii->filename, skipScript);
 					if(skipScript)
 					{
 						LogManager::getSingleton().logMessage(
@@ -1218,17 +1218,18 @@
 		}
 	}
 	//-----------------------------------------------------------------------
-	void ResourceGroupManager::fireScriptStarted(const String& scriptName, bool &skipScript)
+	bool ResourceGroupManager::fireScriptStarted(const String& scriptName, bool skipScript)
 	{
 		OGRE_LOCK_AUTO_MUTEX
 		for (ResourceGroupListenerList::iterator l = mResourceGroupListenerList.begin();
 			l != mResourceGroupListenerList.end(); ++l)
 		{
 			bool temp = false;
-			(*l)->scriptParseStarted(scriptName, temp);
+			temp = (*l)->scriptParseStarted(scriptName, temp);
 			if(temp)
 				skipScript = true;
 		}
+		return skipScript;
 	}
     //-----------------------------------------------------------------------
     void ResourceGroupManager::fireScriptEnded(const String& scriptName, bool skipped)
--- c:\temp\ogre\/OgreMain/src/OgreSceneManager.cpp	2008-08-25 18:42:20.000000000 +0800
+++ ogre/OgreMain/src/OgreSceneManager.cpp	2008-08-29 21:13:40.015625000 +0800
@@ -3721,7 +3721,7 @@
     iend = mRenderQueueListeners.end();
     for (i = mRenderQueueListeners.begin(); i != iend; ++i)
     {
-        (*i)->renderQueueStarted(id, invocation, skip);
+        skip = (*i)->renderQueueStarted(id, invocation, skip);
     }
     return skip;
 }
@@ -3734,7 +3734,7 @@
     iend = mRenderQueueListeners.end();
     for (i = mRenderQueueListeners.begin(); i != iend; ++i)
     {
-        (*i)->renderQueueEnded(id, invocation, repeat);
+        repeat = (*i)->renderQueueEnded(id, invocation, repeat);
     }
     return repeat;
 }
--- c:\temp\ogre\/Samples/Common/CEGUIRenderer/include/OgreCEGUIRenderer.h	2008-06-12 22:10:57.000000000 +0800
+++ ogre/Samples/Common/CEGUIRenderer/include/OgreCEGUIRenderer.h	2008-08-31 16:13:30.109375000 +0800
@@ -80,8 +80,8 @@
 
 	virtual ~CEGUIRQListener() {}
 
-	virtual void	renderQueueStarted(Ogre::uint8 id, const Ogre::String& invocation, bool& skipThisQueue);
-	virtual void	renderQueueEnded(Ogre::uint8 id, const Ogre::String& invocation, bool& repeatThisQueue);
+	virtual bool	renderQueueStarted(Ogre::uint8 id, const Ogre::String& invocation, bool skipThisQueue);
+	virtual bool	renderQueueEnded(Ogre::uint8 id, const Ogre::String& invocation, bool repeatThisQueue);
 
 	// methods for adjusting target queue settings
 	void	setTargetRenderQueue(Ogre::uint8 queue_id)		{d_queue_id = queue_id;}
--- c:\temp\ogre\/Samples/Common/CEGUIRenderer/src/OgreCEGUIRenderer.cpp	2008-08-24 22:20:19.000000000 +0800
+++ ogre/Samples/Common/CEGUIRenderer/src/OgreCEGUIRenderer.cpp	2008-08-31 16:13:45.078125000 +0800
@@ -762,13 +762,14 @@
 	Callback from Ogre invoked before other stuff in our target queue
 	is rendered
 *************************************************************************/
-void CEGUIRQListener::renderQueueStarted(Ogre::uint8 id, const Ogre::String& invocation, 
-										 bool& skipThisQueue)
+bool CEGUIRQListener::renderQueueStarted(Ogre::uint8 id, const Ogre::String& invocation, 
+										 bool skipThisQueue)
 {
 	if ((!d_post_queue) && (d_queue_id == id))
 	{
 		CEGUI::System::getSingleton().renderGUI();
 	}
+	return skipThisQueue;
 
 }
 
@@ -777,13 +778,13 @@
 Callback from Ogre invoked after other stuff in our target queue
 is rendered
 *************************************************************************/
-void CEGUIRQListener::renderQueueEnded(Ogre::uint8 id, const Ogre::String& invocation, bool& repeatThisQueue)
+bool CEGUIRQListener::renderQueueEnded(Ogre::uint8 id, const Ogre::String& invocation, bool repeatThisQueue)
 {
 	if ((d_post_queue) && (d_queue_id == id))
 	{
 		CEGUI::System::getSingleton().renderGUI();
 	}
-
+	return repeatThisQueue;
 }
 
 } // End of  CEGUI namespace section
--- c:\temp\ogre\/Samples/Common/include/ExampleFrameListener.h	2008-06-12 22:10:57.000000000 +0800
+++ ogre/Samples/Common/include/ExampleFrameListener.h	2008-08-29 21:17:49.546875000 +0800
@@ -41,7 +41,7 @@
 
 //Use this define to signify OIS will be used as a DLL
 //(so that dll import/export macros are in effect)
-#define OIS_DYNAMIC_LIB
+//#define OIS_DYNAMIC_LIB
 #include <OIS/OIS.h>
 
 using namespace Ogre;
