Index: include/OgreOdeEntityInformer.h
===================================================================
--- include/OgreOdeEntityInformer.h	(revision 2510)
+++ include/OgreOdeEntityInformer.h	(working copy)
@@ -36,12 +36,12 @@
 		const TriangleIndex* getIndices();
 		unsigned int getIndexCount();
 
+		bool getBoneVertices(unsigned char bone,unsigned int &vertex_count, Ogre::Vector3* &vertices);
 	protected:
         void addVertexData(const Ogre::VertexData *vertex_data, 
             const Ogre::VertexData *blended_data = 0, 
             const Ogre::Mesh::IndexMap *indexMap = 0);
 		void addIndexData(Ogre::IndexData *data, const unsigned int offset = 0);
-		bool getBoneVertices(unsigned char bone,unsigned int &vertex_count, Ogre::Vector3* &vertices);
 
 		Ogre::Entity*		_entity;
 		Ogre::SceneNode*	_node;
Index: src/OgreOdeTriangleMeshDataManager.cpp
===================================================================
--- src/OgreOdeTriangleMeshDataManager.cpp	(revision 2510)
+++ src/OgreOdeTriangleMeshDataManager.cpp	(working copy)
@@ -1,106 +1,106 @@
-#include "OgreOdePrecompiledHeaders.h"
-
-#include "OgreOdeTriangleMeshDataManager.h"
-
+#include "OgreOdePrecompiledHeaders.h"
 
+#include "OgreOdeTriangleMeshDataManager.h"
+
+
 using namespace Ogre;
-using namespace OgreOde; 
-
-template<> TriangleMeshDataManager *Ogre::Singleton<TriangleMeshDataManager>::ms_Singleton = 0;
-
-namespace OgreOde
-{
-	//-----------------------------------------------------------------------
-	TriangleMeshDataManager::TriangleMeshDataManager()
-	{
-	}
-
-	//-----------------------------------------------------------------------
-	TriangleMeshDataManager::~TriangleMeshDataManager()
-	{
-		//mTriangleMeshDataMap.clear();
-	}
-	
-	//-----------------------------------------------------------------------
-	TriangleMeshDataManager *TriangleMeshDataManager::getSingletonPtr () 
-	{
-		return ms_Singleton;
-	}
-
-	//-----------------------------------------------------------------------
-	TriangleMeshDataManager &TriangleMeshDataManager::getSingleton ()
-	{  
-		assert (ms_Singleton);  
-		return (*ms_Singleton);
-	}
-
-
-	//-----------------------------------------------------------------------
-	void TriangleMeshDataManager::addTriangleMeshData(const String& name, TriangleMeshDataPtr shape, Vector3 scale)
-	{
-
-		mTriangleMeshDataMap[name][scale] = shape;
-		
-		// reduce count so when Ode::Geometry changes its dataPtr or is deleted we arn't
-		// left with this one on a referance count of 1
-		unsigned int* count = shape.useCountPointer();
-		(*count)--;
-		
-	}
-
-
-	//-----------------------------------------------------------------------
-	void TriangleMeshDataManager::removeTriangleMeshData(const String& name, Vector3 scale)
-	{
-		
-		TriangleMeshDataPtrMap::iterator itr = mTriangleMeshDataMap.find(name);
-		if(itr != mTriangleMeshDataMap.end())
-		{
-		
-			 std::map<Ogre::Vector3, OgreOde::TriangleMeshDataPtr,OgreOde::TriangleMeshDataManager::vectorLess>::iterator itr2;
-			
-			itr2 = itr->second.find(scale);
-			
-			if ( itr2 != itr->second.end() )
-			{
-				//printf ("no TriangleMeshData for scale so erase it\n");
-				itr->second.erase(itr2);
-				itr2->second.setNull();
-			}
-			
-			if (itr->second.size() == 0) 
-			{
-				//printf ("have no TriangleMeshData for this mesh so erase it from map\n");
-				mTriangleMeshDataMap.erase(itr); 
-			}
-		}
-			
-	}
-	
-	
-	/** looks for mesh name then size or returns a NULL TriangleMeshDataPtr
-	*/
-	//-----------------------------------------------------------------------
-	TriangleMeshDataPtr TriangleMeshDataManager::getTriangleMeshData(const String& name, Vector3 scale)
-	{
-	
-		TriangleMeshDataPtrMap::iterator itr = mTriangleMeshDataMap.find(name);
-		if(itr != mTriangleMeshDataMap.end())
-		{
-			 std::map<Ogre::Vector3, OgreOde::TriangleMeshDataPtr,OgreOde::TriangleMeshDataManager::vectorLess>::iterator itr2;
-			
-			itr2 = itr->second.find(scale);
-			
-			if ( itr2 != itr->second.end() )
-			{
-				return itr2->second;
-			}
-		}
-		
-		//printf ("TriangleMeshDataManager::getTriangleMeshData not found\n");
-		
-		return NULL;
-	
-	}
-
-}
+using namespace OgreOde; 
+
+template<> OgreOde::TriangleMeshDataManager * Ogre::Singleton<OgreOde::TriangleMeshDataManager>::ms_Singleton = 0;
+
+namespace OgreOde
+{
+	//-----------------------------------------------------------------------
+	TriangleMeshDataManager::TriangleMeshDataManager()
+	{
+	}
+
+	//-----------------------------------------------------------------------
+	TriangleMeshDataManager::~TriangleMeshDataManager()
+	{
+		//mTriangleMeshDataMap.clear();
+	}
+	
+	//-----------------------------------------------------------------------
+	TriangleMeshDataManager *TriangleMeshDataManager::getSingletonPtr () 
+	{
+		return ms_Singleton;
+	}
+
+	//-----------------------------------------------------------------------
+	TriangleMeshDataManager &TriangleMeshDataManager::getSingleton ()
+	{  
+		assert (ms_Singleton);  
+		return (*ms_Singleton);
+	}
+
+
+	//-----------------------------------------------------------------------
+	void TriangleMeshDataManager::addTriangleMeshData(const String& name, TriangleMeshDataPtr shape, Vector3 scale)
+	{
+
+		mTriangleMeshDataMap[name][scale] = shape;
+		
+		// reduce count so when Ode::Geometry changes its dataPtr or is deleted we arn't
+		// left with this one on a referance count of 1
+		unsigned int* count = shape.useCountPointer();
+		(*count)--;
+		
+	}
+
+
+	//-----------------------------------------------------------------------
+	void TriangleMeshDataManager::removeTriangleMeshData(const String& name, Vector3 scale)
+	{
+		
+		TriangleMeshDataPtrMap::iterator itr = mTriangleMeshDataMap.find(name);
+		if(itr != mTriangleMeshDataMap.end())
+		{
+		
+			 std::map<Ogre::Vector3, OgreOde::TriangleMeshDataPtr,OgreOde::TriangleMeshDataManager::vectorLess>::iterator itr2;
+			
+			itr2 = itr->second.find(scale);
+			
+			if ( itr2 != itr->second.end() )
+			{
+				//printf ("no TriangleMeshData for scale so erase it\n");
+				itr->second.erase(itr2);
+				itr2->second.setNull();
+			}
+			
+			if (itr->second.size() == 0) 
+			{
+				//printf ("have no TriangleMeshData for this mesh so erase it from map\n");
+				mTriangleMeshDataMap.erase(itr); 
+			}
+		}
+			
+	}
+	
+	
+	/** looks for mesh name then size or returns a NULL TriangleMeshDataPtr
+	*/
+	//-----------------------------------------------------------------------
+	TriangleMeshDataPtr TriangleMeshDataManager::getTriangleMeshData(const String& name, Vector3 scale)
+	{
+	
+		TriangleMeshDataPtrMap::iterator itr = mTriangleMeshDataMap.find(name);
+		if(itr != mTriangleMeshDataMap.end())
+		{
+			 std::map<Ogre::Vector3, OgreOde::TriangleMeshDataPtr,OgreOde::TriangleMeshDataManager::vectorLess>::iterator itr2;
+			
+			itr2 = itr->second.find(scale);
+			
+			if ( itr2 != itr->second.end() )
+			{
+				return itr2->second;
+			}
+		}
+		
+		//printf ("TriangleMeshDataManager::getTriangleMeshData not found\n");
+		
+		return NULL;
+	
+	}
+
+}
Index: prefab/src/OgreOdeRagdoll.cpp
===================================================================
--- prefab/src/OgreOdeRagdoll.cpp	(revision 2510)
+++ prefab/src/OgreOdeRagdoll.cpp	(working copy)
@@ -10,6 +10,7 @@
 
 #include "OgreOde_Prefab.h"
 #include "OgreOdeRagdoll.h"
+#include "OgreAlignedAllocator.h"
 
 using namespace Ogre;
 using namespace OgreOde;
