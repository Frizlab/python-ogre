// Linear fogged morphing terrain
void OverhangTerrain_vp_linear_cg(
    float4 position : POSITION,
//    float2 uv1   	: TEXCOORD0,
//    float2 uv2	 	: TEXCOORD1,
    float delta     : BLENDWEIGHT,

    out float4 oPosition : POSITION,
    out float2 oUv1		 : TEXCOORD0,
    out float2 oUv2		 : TEXCOORD1,
    out float4 colour    : COLOR,
    out float fog		 : FOG,
    uniform float4x4 worldViewProj,
    uniform float4x4 world,
    uniform float morphFactor
    )
{
    float2 protoUv = mul(world, position).xz;
    // Main texture coords
    oUv1 =  protoUv / 1500;
    // Detail texture coords
    oUv2 =  protoUv / 62.5;
    // Apply morph
    position.y = position.y + (delta.x * morphFactor);
    // world / view / projection
    oPosition = mul(worldViewProj, position);
    // Full bright (no lighting)
    colour = float4(1,1,1,1);
    // Fog
    // f = end - camz / end - start
    // when start / end has been set, fog value is distance
    fog = oPosition.z;
}

void OverhangTerrain_fp_cg (
	float2 uv1 : TEXCOORD0,
	float2 uv2 : TEXCOORD1,
	float fog : FOG,

	out float4 color : COLOR,

	uniform sampler2D worldTex,
	uniform sampler2D detailTex
	)
	{
		color = tex2D(worldTex, uv1) * tex2D(detailTex, uv2);
//		color = float4(1, 1,1,1);
//		color = color * (1-fog);
	}

//
void OverhangTerrain_vp_linear_triplanar_cg(
    float4 position : POSITION,
    float delta     : BLENDWEIGHT,
    float3 normal	: NORMAL,

    out float4 oPosition : POSITION,
    out float2 oUv1		 : TEXCOORD0,
    out float3 oUv2		 : TEXCOORD1,
    out float4 colour    : COLOR,
    out float fog		 : TEXCOORD3,
    out float3 oNormal	 : TEXCOORD2,
    out float4 oColour   : TEXCOORD4,
    out float4 vPosition : TEXCOORD5,

    uniform float4 lightPosition,
    uniform float3 eyePosition,
    uniform float4 lightDiffuse,
    uniform float4 lightSpecular,
    uniform float exponent,
    uniform float4x4 worldViewProj,
    uniform float4x4 world,
    uniform float morphFactor
    )
{
    float3 protoUv = mul(world, position);
    // Main texture coords
    oUv1 =  (protoUv / 1500).xz;
    // Detail texture coords
    oUv2 =  protoUv / 62.5;
    // Apply morph
    position.y = position.y + (delta.x * morphFactor);
    vPosition = position;
    // world / view / projection
    oPosition = mul(worldViewProj, position);
    // Full bright (no lighting)
    colour = float4(1,1,1,1);
    float3 EyeDir = normalize(eyePosition- position.xyz);
    float3 LightDir = normalize(lightPosition.xyz - ( position.xyz * lightPosition.w));
    float3 HalfAngle = normalize(LightDir + EyeDir);
    float3 N = normalize(normal);

    float NdotL = dot(LightDir, N);
    float NdotH = dot(HalfAngle, N);
    float4 Lit = lit(NdotL, NdotH, exponent);
    oColour = lightDiffuse * Lit.y; //+ lightSpecular * Lit.z;
    // Fog
    // f = end - camz / end - start
    // when start / end has been set, fog value is distance
    fog = oPosition.z / 1500;
    oNormal = normal;
}

void OverhangTerrain_fp_triplanar_cg (

	float2 uv1 : TEXCOORD0,
	float3 uv2 : TEXCOORD1,
	float3 normal : TEXCOORD2,
	float fog : TEXCOORD3,
    float4 inColor : TEXCOORD4,
    float4 position: TEXCOORD5,
	out float4 color : COLOR,

	uniform sampler2D worldTex : register(s0),
	uniform sampler2D detailTex : register(s1),
	uniform sampler2D rock : register(s2),
	uniform sampler2D sand : register(s3),
	uniform float4 waterColour
	)
	{
		//taken from Cascades DX10 demo.
		float3 blendWeights = normalize(normal);
		blendWeights = abs(blendWeights);
		blendWeights *= float3(7,7,7);
		blendWeights = pow(blendWeights, float3(3,3,3));
		blendWeights = max(float3(0.0,0.0,0.0), blendWeights);
		//so they sum to 1.0:
		blendWeights /= dot(blendWeights, float3(1.0,1.0,1.0));

		float4 worldColor = tex2D(worldTex, uv1);
		float4 color1 = tex2D(rock, uv2.xy*3);
		float4 color2 = tex2D(rock, uv2.yz*3);
		float4 color3;
		float4 sandColor = tex2D(sand, uv2.xz);;
		if(normal.y < 0.0)
			color3 = tex2D(rock, uv2.xz*3);
		else
			color3 = tex2D(detailTex, uv2.xz);

//		float4 color1 = float4(1,0,0,1);
//		float4 color2 = float4(0,1,0,1);
//		float4 color3 = float4(0,0,1,1);

		color = color1*blendWeights.z + color2*blendWeights.x + color3*blendWeights.y;

		if(position.y < 100)
            	color = lerp(color, sandColor, min((100 - position.y) / 20.0, 0.7));
		
		if(position.y < 80.0)
			//float dist = (min((80.0 - position.y) / 10.0, 1.0));
			color = lerp(color, waterColour, min((80.0 - position.y) / 20.0, 0.8));
		

//        else
//           color = color1*blendWeights.z + color2*blendWeights.x + color3*blendWeights.y;
//		color = color1*normal.z + color2*normal.x + color3*normal.y;
		//color *= worldColor;
		color *= inColor + float4(0.2,0.2,0.3,1.0);
		//color = color * (1-fog) + float4(0.86, 0.86, 0.96, 1.0)*fog;
	}
