// ---------------------------------------------- Begin: Flame system ----------------------------------------------
// This particle system demonstrates the emission of affectors and the effect on the flames.
// ---------------------------------------------------------------------------------------------------------------
system flameSystem
{
	technique
	{
		material							ParticleUniverse/Flame
		default_particle_width				45
		default_particle_height				60
		visual_particle_quota				2000
		emitted_affector_quota				200

		renderer Billboard
		{
			billboard_type					oriented_self
		}

		// Emission of flame particles
		emitter								Box						flamesEmitter
		{
			emission_rate					200
			angle							40
			direction						0 1 0
			box_em_height					1
			velocity						dyn_random
			{
				min							60
				max							80
			}
			time_to_live					dyn_random
			{
				min							5
				max							9
			}
		}

		// Emission of Gravity Affectors
		emitter								Box						gravityEmitter
		{
			emission_rate					5
			emits							affector_particle		gravityAffector
			angle							80
			direction						0 1 0
			position						0 60 0
			velocity						dyn_random
			{
				min							80
				max							120
			}
			
			// Define the mass of the affectors (instead of defining it in the GravityAffector 
			// itself (which is also possible))
			mass							dyn_random
			{
				min							20
				max							40
			}

			time_to_live					dyn_random
			{
				min							2
				max							5
			}
		}
		
		// Affector to be emitted
		affector							Gravity				gravityAffector
		{
			gravity						40
		}
		
		// Affector that affects all (visual) particles in general
		affector							Scale
		{
			xyz_scale						-10
		}

		// Affect with a random Sine force (also affects the Gravity affector particles)
		affector							SineForce
		{
			force_aff_vector				30 0 0
			sinef_aff_frequency_min			1
			sinef_aff_frequency_max			3
		}

		affector							Colour
		{
			colour_aff_time_colour			0 1 1 1
			colour_aff_time_colour			1 0 0 0
		}
	}
}
// ----------------------------------------------- End: Flame system ----------------------------------------------


// ---------------------------------------------- Begin: Fire system ----------------------------------------------
// This particle system demonstrates the combination of 2 combined particle techniques.
// ---------------------------------------------------------------------------------------------------------------
system fireSystem
{
	// ---------------- Fire ----------------
	technique
	{
		material							ParticleUniverse/Fire
		default_particle_width				60
		default_particle_height				60
		visual_particle_quota				500

		renderer Billboard
		{
			// Put the fire in front of the smoke
			render_queue_group				80
		}

		// Emission of fire particles
		emitter								Point
		{
			emission_rate					50
			angle							30
			direction						0 1 0
			velocity						dyn_random
			{
				min							60
				max							80
			}
			time_to_live					dyn_random
			{
				min							3
				max							6
			}
		}
		
		// Use a gravity affector to attract the particles a bit
		affector							Gravity
		{
			position						0 200 0
			gravity							1000
		}

		affector							Scale
		{
			xyz_scale						-5
		}

		affector							Colour
		{
			colour_aff_time_colour			0 1 1 1
			colour_aff_time_colour			1 0 0 0
		}
	}

	// ---------------- Smoke ----------------
	technique
	{
		material							ParticleUniverse/Smoke
		default_particle_width				40
		default_particle_height				40
		use_alias							$defaultBillboardRenderer

		// Emission of smoke particles
		emitter								Point
		{
			emission_rate					20
			angle							20
			direction						0 1 0
			velocity						dyn_random
			{
				min							60
				max							80
			}
			time_to_live					dyn_random
			{
				min							5
				max							7
			}
		}

		affector							Scale
		{
			xyz_scale						20
		}
		
		affector							Colour
		{
			colour_aff_time_colour			0 1 0.9 0 1
			colour_aff_time_colour			1 1 1 1 0
		}
	}
}

// ------------------------------------------ Begin: Windy Fire system -------------------------------------------
// This particle system demonstrates a flip-flop mechanism with muliple observers
// ---------------------------------------------------------------------------------------------------------------
system windyFireSystem
{
	// ---------------- Fire ----------------
	technique
	{
		material							ParticleUniverse/Fire
		default_particle_width				60
		default_particle_height				60
		visual_particle_quota				500

		renderer Billboard
		{
			// Put the fire in front of the smoke
			render_queue_group				80
		}

		// Emission of fire particles
		emitter								Point
		{
			emission_rate					100
			angle							30
			direction						0 1 0
			velocity						dyn_random
			{
				min							100
				max							140
			}
			time_to_live					dyn_random
			{
				min							3
				max							6
			}
		}
		
		// The two observers are switching each other on and off, while they also switch 
		// between two LinearForceAffectors. This flip/flop mechanism creates a windy-like effect.
		observer							OnRandom				ObserverRight
		{
			observe_interval				0.6
			random_threshold				0.4
			handler													DoEnableComponent
			{
                enable_component			affector_component		LinearForceLeft			false
			}
			handler													DoEnableComponent
			{
                enable_component			affector_component		LinearForceRight		true
			}
			handler													DoEnableComponent
			{
                enable_component			observer_component		ObserverRight			false
			}
			handler													DoEnableComponent
			{
                enable_component			observer_component		ObserverLeft			true
			}
		}
		observer							OnRandom				ObserverLeft
		{
			observe_interval				0.6
			random_threshold				0.6
			handler													DoEnableComponent
			{
                enable_component			affector_component		LinearForceLeft			true
			}
			handler													DoEnableComponent
			{
                enable_component			affector_component		LinearForceRight		false
			}
			handler													DoEnableComponent
			{
                enable_component			observer_component		ObserverRight			true
			}
			handler													DoEnableComponent
			{
                enable_component			observer_component		ObserverLeft			false
			}
		}
		affector							LinearForce				LinearForceRight
		{
			enabled							false
			force_aff_vector				100 0 0
		}
		affector							LinearForce				LinearForceLeft
		{
			enabled							false
			force_aff_vector				-100 0 0
		}

		affector							Scale
		{
			xyz_scale						-5
		}

		affector							Colour
		{
			colour_aff_time_colour			0 1 1 1
			colour_aff_time_colour			1 0 0 0
		}
	}
}
