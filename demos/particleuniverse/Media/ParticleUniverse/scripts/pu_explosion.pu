// ------------------------------------------- Begin: Explosion system -------------------------------------------
// The explosion system is an example of a complex particle system.
// Note, that the Projectiles and debris are not emitted immediately, but only after some time to make the effect
// look a bit more realistic.
// ---------------------------------------------------------------------------------------------------------------
system explosionSystem
{
	// --------------- The Flame Burst ---------------
	technique
	{
		use_alias						$defaultBillboardRenderer
		material						ParticleUniverse/ExplosionFire
		default_particle_width			10
		default_particle_height			10
		visual_particle_quota			500
		emitter							SphereSurface		BurstEmitter
		{
			emission_rate				20
			auto_direction				true
			sphere_surface_em_radius	5
			velocity					100
			time_to_live				2
		}
		
		// Change the colour of the burst
		affector						Colour
		{
			colour_aff_time_colour		0 1 1 0.95
			colour_aff_time_colour		0.5 0.18 0.05 0.01
			colour_aff_time_colour		1 0 0 0
		}
		
		// Let it grow fast, equally in all dimensions
		affector						Scale
		{
			xyz_scale					200
		}

		// After 0.7 seconds, the emitters stops
		observer						OnTime
		{
			on_time						greater_than 0.7
			since_start_system			true
			handler						DoEnableComponent
			{
				enable_component		emitter_component	BurstEmitter	false
			}
		}
	}
	
	// --------------- Projectiles (this technique is responsible for emitting the projectiles) ---------------
	technique
	{
		use_alias						$defaultBillboardRenderer
		emitted_technique_quota			6

		// Emit the technique that is responsible for the projectiles
		emitter							Point	NucleusEmitter
		{
			enabled						false
			emission_rate				6
			emits						technique_particle	NucleusTechnique
			force_emission				true
			angle						80
			direction					0 1 0
			velocity					300
			time_to_live				10
		}
		
		// Apply some kind of gravity
		affector						LinearForce
		{
			force_aff_vector			0 -100 0
		}

		// After 0.3 seconds, the emitter starts
		observer						OnTime
		{
			on_time						greater_than 0.3
			since_start_system			true
			handler						DoEnableComponent
			{
				enable_component		emitter_component	NucleusEmitter	true
			}
		}
	}
	
	// --------------- The emitted Projectile ---------------
	technique							NucleusTechnique
	{
		material						ParticleUniverse/Nucleus
		default_particle_width			15
		default_particle_height			15
		visual_particle_quota			500
		
		// 'oriented_self' doesn't work, because the direction of the particle is zero. 
		// So use the default settings
		use_alias						$defaultBillboardRenderer
		emitter							Point
		{
			emission_rate				100
			direction					0 -1 0
			angle						360
			time_to_live				3
			velocity					2
		}
		
		// Change the texture from red to grey and fading out
		affector						Colour
		{
			colour_aff_time_colour		0 0.5 0.4 0.2
			colour_aff_time_colour		0.1 0.5 0.2 0.05
			colour_aff_time_colour		0.2 0.1 0.1 0.1
			colour_aff_time_colour		1 0 0 0
		}

		// Rotate the texture to keep variation
		affector						TextureRotator
		{
			tex_rot_use_own_rotation	true
			tex_rot_speed				dyn_random
			{
				min						0.1
				max						1
			}
			tex_rot_rotation			dyn_random
			{
				min						1
				max						90
			}
		}

		// Make the projectile smaller over time
		affector						Scale
		{
			xyz_scale					-5
		}
	}

	// --------------- Debris ---------------
	technique
	{
		material						ParticleUniverse/Debris
		visual_particle_quota			500
		renderer						Billboard
		{
			billboard_type				oriented_self
		}
		
		// Emit the debris
		emitter							Point	DebrisEmitter
		{
			enabled						false
			emission_rate				100
			force_emission				true
			direction					0 -1 0
			angle						360
			time_to_live				5
			particle_height				dyn_random
			{
				min						2
				max						20
			}
			particle_width				3
			velocity					dyn_random
			{
				min						100
				max						180
			}
		}
		
		// Start with a normal coloured texture and fade out
		affector						Colour
		{
			colour_aff_time_colour		0 1 1 1
			colour_aff_time_colour		1 0 0 0
		}
		
		// Apply some kind of gravity
		affector						LinearForce
		{
			force_aff_vector			0 -100 0
		}
		
		// After 0.3 seconds, the emitters starts
		observer						OnTime
		{
			on_time						greater_than 0.3
			since_start_system			true
			handler						DoEnableComponent
			{
				enable_component		emitter_component	DebrisEmitter	true
			}
		}
	}
}
// ---------------------------------------------- End: Explosion system ----------------------------------------------
