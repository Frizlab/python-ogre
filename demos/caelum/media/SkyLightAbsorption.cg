sampler gradientsMap : register(s0);

void main_vp (float4 position : POSITION,
							float4 normal : NORMAL,
							float2 uv : TEXCOORD0,
							out float4 oPosition : POSITION,
							out float4 oCol : COLOR, 
							out float2 oUv : TEXCOORD0,
							out float glow : TEXCOORD1,
							out float absorption : TEXCOORD2,
							out float y : TEXCOORD3, 
							uniform float lightAbsorption,
							uniform float4x4 worldViewProj,
							uniform float3 sunDirection)
{
	sunDirection = normalize (sunDirection);
	normal = normalize (normal);
	float tangent = dot (-sunDirection, normal);
	glow = clamp (-tangent, 0, 1);
	absorption = tangent * lightAbsorption;
	glow += clamp (-sunDirection.y, -1, 0);

	y = -normal.y;

	oPosition = mul(worldViewProj, position);
	oCol = float4 (1, 1, 1, 1);
	oUv = uv;
}

void main_fp (float4 col : COLOR, 
							float2 uv : TEXCOORD0,
							float glow : TEXCOORD1,
							float absorption : TEXCOORD2,
							float y : TEXCOORD3,
							out float4 oCol : COLOR,
							uniform float offset, 
//							uniform float lightInvScattering,
							uniform float atmosphereInvHeight)
{
	float lightInvScattering = 3.0;
	glow = pow (glow, lightInvScattering) * (1 - pow (clamp (1 - y, 0, 1), atmosphereInvHeight));
	float4 sunColour = float4 (1, 0.9, 0, 1);

	// Pass the colour
	oCol = tex2D (gradientsMap, uv + float2 (offset, 0)) * col;
	oCol.rgb += sunColour.rgb * glow / lightInvScattering;

	// Desaturate
	float4 desaturated;
	desaturated.r = (oCol.r + oCol.g + oCol.b) * 0.333;
	desaturated.g = desaturated.r;
	desaturated.b = desaturated.r;

	oCol.a *= 1 - (absorption * 0.5);
	oCol.rgb = oCol.rgb * oCol.a + desaturated.rgb * (1 - oCol.a);
}
