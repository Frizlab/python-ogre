vertex_program CaelumLayeredCloudsVP cg
{
	source CaelumShaders.cg
	entry_point LayeredClouds_vp
	profiles vs_2_0 arbvp1
	compile_arguments -posinv
	
	default_params
	{
		param_named_auto worldViewProj worldviewproj_matrix
		param_named sunDirection float3 -1 -1 0
	}
}

fragment_program CaelumLayeredCloudsFP cg
{
	source CaelumShaders.cg
	entry_point LayeredClouds_fp
	profiles ps_2_0 arbfp1

	default_params
	{
		// Caelum sky properties
		param_named sunDirection float3 -1 -1 0
		param_named sunColour float4 1 1 1 1
		
		// The inverse of the cloud forms scale
		param_named cloudMassInvScale float 1.2
		// The inverse of the cloud details scale
		param_named cloudDetailInvScale float 4.8
		
		// Cloud mass offset
		param_named cloudMassOffset float2 0 0
		// Cloud details offset
		param_named cloudDetailOffset float2 0.5 0.5
		
		// Cloud coverage, between 0 and 1
		param_named cloudCover float 0.9
		// Blending factor between Cloud1 and Cloud2
		param_named cloudMassBlend float 0.9
		// Cloud detail weight.
		param_named cloudDetailBlend float 0.5
		
		// Cloud sharpness. Lower values result in softer clouds.
		param_named cloudSharpness float 4
		
		// Cloud thickness. Bigger values results in darker clouds.
		param_named cloudThickness float 3
		
		// Fog colour; used as the base cloud colour.
		param_named fogColour float4
	}
}

material CaelumLayeredClouds
{
	technique
	{
		pass
		{
			lighting off
			depth_check off                                     
			depth_write off
			scene_blend alpha_blend
			fog_override true

			vertex_program_ref CaelumLayeredCloudsVP
			{
			}
			
			fragment_program_ref CaelumLayeredCloudsFP
			{
			}

			texture_unit Cloud1
			{
				anim_texture noise1.png noise2.png noise3.png noise4.png 600
			}
			
			texture_unit Cloud2
			{
				anim_texture noise2.png noise3.png noise4.png noise1.png 600
			}
			
			texture_unit Detail
			{
				texture noise4.png
			}
		}
	}
}