
// Vertex program for automatic terrain texture generation
void main_vp
(
    float4             iPosition           : POSITION,
    float4             iNormal             : NORMAL,
    float4             iTexcoord           : TEXCOORD0,
    float4             iLodpos             : BLENDWEIGHT,

    out float4         oPosition           : POSITION,
    out float4         oCoverage           : COLOR,
    out float2         oScaled0            : TEXCOORD0,
    out float2         oScaled1            : TEXCOORD1,
    out float2         oScaled2            : TEXCOORD2,
    out float2         oScaled3            : TEXCOORD3,

    uniform float4x4   worldViewProj,
    uniform float4     lightDirection,
    uniform float4     ambientLight,

    uniform float4     compressionSettings,
    uniform float4     splatSettings,
    uniform float4     fogSettings,
    uniform float4     fogColour
)
{
    // Calculate the output position and texture coordinates using textures coordinates input.
    float height = ((iPosition.x + 32768) + (iLodpos.x - iPosition.x) * compressionSettings[3]) * compressionSettings[1];

    //float height  = (iPosition.x + 32768)* compressionSettings[1];
    //height = height + (iLodpos.x - height) * compressionSettings[3];

    oPosition = float4(iTexcoord.x*compressionSettings[0], height, iTexcoord.y*compressionSettings[2], 1.0);

    // Transform the current vertex from object space to clip space, since OpenGL isn't doing it for us
    // as long we're using a vertex shader
    oPosition  = mul(worldViewProj, oPosition);

    float no_rock_factor = saturate (iNormal.y);
    // SAND  < configSettings[0]
    oCoverage.x = (height < splatSettings[0])?
                    saturate ((1.0f - (height / splatSettings[0])) * no_rock_factor)
                :
                    0.0f;

    //  splatSettings[0] < GRASS < splatSettings[0]
    oCoverage.y = (height < splatSettings[0])?
                        saturate ((height / splatSettings[0])  * no_rock_factor)
                    :
                       ((height < splatSettings[1])?
                            saturate ((1.0f - (height - splatSettings[0]) / (splatSettings[1] - splatSettings[0])) * no_rock_factor)
                        :
                            0.0f);


    //  splatSettings[0] < ROCK < splatSettings[0]
    oCoverage.z = (height > splatSettings[0])?
                        ((height < splatSettings[1])?
                            saturate (((height - splatSettings[0]) / (splatSettings[1] - splatSettings[0])) * no_rock_factor)
                        :
                            saturate ((1.0f - (height - splatSettings[1]) / (splatSettings[2] - splatSettings[1])) * no_rock_factor))
                    :
                        0.0f;


    //  splatSettings[1] < SNOW <
    oCoverage.w = (height > splatSettings[1])?
                        saturate (((height - splatSettings[1]) / (splatSettings[2] - splatSettings[1])) * no_rock_factor)
                    :
                        0.0f;

    float rock_factor = 1.0f - no_rock_factor;
    oCoverage.z = saturate (oCoverage.z + rock_factor);

    //float fog = saturate(( oPosition.z - fogSettings[0] ) / (fogSettings[1] - fogSettings[0])) * fogSettings[2];
    //oColor0 = (1.0 - fog) * (color * (1.0 - rock_factor));
    //oColor1 = (1.0 - fog) * (color * rock_factor);
    //oFog = fogColour * fog;

    oScaled0 = iTexcoord * 20.0f;
    oScaled1 = oScaled0;
    oScaled2 = oScaled0;
    oScaled3 = oScaled0;
}

// Fragment program for automatic terrain texture generation
void main_fp
(
    float4              iCoverage   : COLOR,
    float2              iScaled0     : TEXCOORD0,
    float2              iScaled1     : TEXCOORD1,
    float2              iScaled2     : TEXCOORD2,
    float2              iScaled3     : TEXCOORD3,

    out float4          oColor      : COLOR,

    uniform sampler2D   textureUnit0: TEXUNIT0,
    uniform sampler2D   textureUnit1: TEXUNIT1,
    uniform sampler2D   textureUnit2: TEXUNIT2,
    uniform sampler2D   textureUnit3: TEXUNIT3
)
{
    oColor = tex2D(textureUnit0, iScaled0.xy) * iCoverage.x
            + tex2D(textureUnit1, iScaled1.xy) * iCoverage.y
            + tex2D(textureUnit2, iScaled2.xy) * iCoverage.z
            + tex2D(textureUnit3, iScaled3.xy) * iCoverage.w;

}

