#! /usr/bin/env python
# encoding: utf-8
# Gustavo Carneiro, 2007

import sys
import Configure
import Options

# the following two variables are used by the target "waf dist"
VERSION='0.0.1'
APPNAME='python_test'

# these variables are mandatory ('/' are converted automatically)
srcdir = '.'
blddir = 'build'

def set_options(opt):
    opt.tool_options('python') # options for disabling pyc or pyo compilation
    opt.tool_options('compiler_cxx')
#     opt.tool_options('boost')
 
def configure(conf):
    conf.env['MSVC_TARGETS'] = ['x86']
    conf.env['LIB_OGRE']=['OgreMain']
#     conf.env['LIBPATH_OGRE']=['c:\\development\\ogre\\lib']
    conf.env['LIB']=['OgreMain']
    conf.env['LIBPATH']=['c:/development/ogre/lib/Release']
    conf.check_tool('compiler_cxx')
    conf.check_tool('python')
    conf.check_python_version((2,4,2))
    conf.check_python_headers()
    
#     conf.check_tool('boost')
#     # find the boost includes first so we know where to look for the libraries
#     print conf.check_boost(lib='python', score_version=(-1000, 1000), tag_minscore=1000 , 
#         cpppath='c:\development',
#         libpath='\development\boost_1_37_0\bin.v2\libs\python\build\msvc-9.0\release\threading-multi')
#         
#     try:
#         conf.check_python_module('pygccxml')
#     except Configure.ConfigurationError:
#         print "(module not found, but we ignore it)"

def build(bld):

    # first compile a few pyc and pyo files
#     obj = bld.new_task_gen(
#         features = 'py')
#     obj.find_sources_in_dirs('.', exts=['.py'])
#     print bld.env
    # then a c extension module
    bld.new_task_gen(
        features = 'cxx cshlib pyext',
        source = 'swig_wrap.cxx',
        includes = 'c:\\development\\ogre\ogremain\\include',
        uselib = 'OGRE',
        libpath = 'c:\\development\\ogre\\lib\\Release',
        target = '_OgreBindings')

#     # then a c program
#     bld.new_task_gen(
#         features = 'cc cprogram pyembed',
#         source = 'test.c',
#         target = 'test')

def shutdown():
    #import os
    #print os.popen('build/default/test').read()
    pass


