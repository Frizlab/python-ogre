// This file has been generated by Py++.

#include "directshowmovietexture.pypp.hpp"
#include "boost/python.hpp"
#include "ogre.h"
#include "ogrematrix4.h"
#include "utilsogredshow.h"

namespace bp = boost::python;

void register_DirectShowMovieTexture_class(){

    { //::OgreUtils::DirectShowMovieTexture
        typedef bp::class_< OgreUtils::DirectShowMovieTexture > DirectShowMovieTexture_exposer_t;
        DirectShowMovieTexture_exposer_t DirectShowMovieTexture_exposer = DirectShowMovieTexture_exposer_t( "DirectShowMovieTexture", "A class for playing movies in an ogre texture", bp::init< int, int, bp::optional< bool > >(( bp::arg("width"), bp::arg("height"), bp::arg("dontModifyDimensions")=(bool)(true) ), "\ncons  decons\n\
Initializes the dshow object, and creates a texture with the given dimensions.\n\
\n\
If dontModifyDimensions is false, the system might modify the texture dimensions\n\
by setting them to the nearest power of two (useful for old computers).\n\
(Ie, 1024x512 if the original dimensions were 640x480).\n\
\n") );
        bp::scope DirectShowMovieTexture_scope( DirectShowMovieTexture_exposer );
        { //::OgreUtils::DirectShowMovieTexture::getMovieDimensions
        
            typedef ::Ogre::Vector2 ( ::OgreUtils::DirectShowMovieTexture::*getMovieDimensions_function_type )(  ) ;
            
            DirectShowMovieTexture_exposer.def( 
                "getMovieDimensions"
                , getMovieDimensions_function_type( &::OgreUtils::DirectShowMovieTexture::getMovieDimensions )
                , "Obtains the dimensions of the current movie" );
        
        }
        { //::OgreUtils::DirectShowMovieTexture::getMovieTexture
        
            typedef ::Ogre::TexturePtr ( ::OgreUtils::DirectShowMovieTexture::*getMovieTexture_function_type )(  ) ;
            
            DirectShowMovieTexture_exposer.def( 
                "getMovieTexture"
                , getMovieTexture_function_type( &::OgreUtils::DirectShowMovieTexture::getMovieTexture )
                , "Obtain the ogre texture where the movie is rendered" );
        
        }
        { //::OgreUtils::DirectShowMovieTexture::isPlayingMovie
        
            typedef bool ( ::OgreUtils::DirectShowMovieTexture::*isPlayingMovie_function_type )(  ) ;
            
            DirectShowMovieTexture_exposer.def( 
                "isPlayingMovie"
                , isPlayingMovie_function_type( &::OgreUtils::DirectShowMovieTexture::isPlayingMovie )
                , "Is the latest video put to play, now playing?" );
        
        }
        { //::OgreUtils::DirectShowMovieTexture::loadMovie
        
            typedef void ( ::OgreUtils::DirectShowMovieTexture::*loadMovie_function_type )( ::Ogre::String const &,bool ) ;
            
            DirectShowMovieTexture_exposer.def( 
                "loadMovie"
                , loadMovie_function_type( &::OgreUtils::DirectShowMovieTexture::loadMovie )
                , ( bp::arg("moviePath"), bp::arg("horizontalMirroring")=(bool)(false) )
                , "\nbasic movie methods\n\
Loads a given movie\n\
\n\
param moviePath A string telling the full path of the file to be loaded.\n\
param horizontalMirroring A bool telling whether the video should be rendered\n\
as if seen through a mirror, or not.\n\
\n" );
        
        }
        { //::OgreUtils::DirectShowMovieTexture::pauseMovie
        
            typedef void ( ::OgreUtils::DirectShowMovieTexture::*pauseMovie_function_type )(  ) ;
            
            DirectShowMovieTexture_exposer.def( 
                "pauseMovie"
                , pauseMovie_function_type( &::OgreUtils::DirectShowMovieTexture::pauseMovie )
                , "Pauses the current movie" );
        
        }
        { //::OgreUtils::DirectShowMovieTexture::playMovie
        
            typedef void ( ::OgreUtils::DirectShowMovieTexture::*playMovie_function_type )(  ) ;
            
            DirectShowMovieTexture_exposer.def( 
                "playMovie"
                , playMovie_function_type( &::OgreUtils::DirectShowMovieTexture::playMovie )
                , "Starts playing the current movie" );
        
        }
        { //::OgreUtils::DirectShowMovieTexture::rewindMovie
        
            typedef void ( ::OgreUtils::DirectShowMovieTexture::*rewindMovie_function_type )(  ) ;
            
            DirectShowMovieTexture_exposer.def( 
                "rewindMovie"
                , rewindMovie_function_type( &::OgreUtils::DirectShowMovieTexture::rewindMovie )
                , "Makes the current movie rewind" );
        
        }
        { //::OgreUtils::DirectShowMovieTexture::stopMovie
        
            typedef void ( ::OgreUtils::DirectShowMovieTexture::*stopMovie_function_type )(  ) ;
            
            DirectShowMovieTexture_exposer.def( 
                "stopMovie"
                , stopMovie_function_type( &::OgreUtils::DirectShowMovieTexture::stopMovie )
                , "Stops the current movie" );
        
        }
        { //::OgreUtils::DirectShowMovieTexture::unloadMovie
        
            typedef void ( ::OgreUtils::DirectShowMovieTexture::*unloadMovie_function_type )(  ) ;
            
            DirectShowMovieTexture_exposer.def( 
                "unloadMovie"
                , unloadMovie_function_type( &::OgreUtils::DirectShowMovieTexture::unloadMovie )
                , "Unloads the current movie" );
        
        }
        { //::OgreUtils::DirectShowMovieTexture::updateMovieTexture
        
            typedef void ( ::OgreUtils::DirectShowMovieTexture::*updateMovieTexture_function_type )(  ) ;
            
            DirectShowMovieTexture_exposer.def( 
                "updateMovieTexture"
                , updateMovieTexture_function_type( &::OgreUtils::DirectShowMovieTexture::updateMovieTexture )
                , "Render a movie frame in the ogre texture" );
        
        }
    }

}
